#*********************************************************************************#
# FILE: TABIND-Scrabble-Project                                                   #
#                                                                                 #
# DESCRIPTION: The TABIND Scrabble Project aims to develop a program that takes   #
# the letter combination “tabind” and creates an alphabetical list of all the     #
# valid words that can be found with those letters. The project utilizes Python   #
# to generate permutations of the letters and filters them using a                #
# comprehensive word list.                                                        #
#                                                                                 #
# DEVELOPER: Claire Chen                                                          #
# DEVELOPER PHONE: +1 (XXX) XXX-XXXX                                              #
# DEVELOPER EMAIL: developer@example.com                                          #
#                                                                                 #
# VERSION: 1.0                                                                    #
# CREATED DATE-TIME: 20240628-15:00 Eastern Time Zone USA                         #
#                                                                                 #
# VERSION: 1.1                                                                    #
# REVISION DATE-TIME: YYYYMMDD-HH:MM                                              #
# DEVELOPER MAKING CHANGE: First_name Last_name                                   #
# DEVELOPER MAKING CHANGE: PHONE: +1 (XXX) XXX-XXXX                               #
# DEVELOPER MAKING CHANGE: EMAIL: first.last@email.com                            #
#                                                                                 #
#*********************************************************************************#

#    Scripts start below

import itertools
import urllib.request

# Function to load the dictionary from a file
def load_dictionary(file_path):
    # Open the file in read mode
    with open(file_path, 'r') as file:
        # Read all lines, strip whitespace, convert to lowercase, and store in a set for quick lookup
        valid_words = set(word.strip().lower() for word in file)
    
    # Print all single-letter words in the dictionary
    single_letter_words = {word for word in valid_words if len(word) == 1}
    print(f"Single-letter words in dictionary: {single_letter_words}")
    
    # Filter out invalid single-letter words, only keep 'a' and 'i'
    valid_words = {word for word in valid_words if len(word) > 1 or word in {'a', 'i'}}
    
    return valid_words

# Function to generate all permutations of given letters
def generate_permutations(letters):
    permutations = set()
    # Generate permutations of all possible lengths (from 1 to length of letters)
    for i in range(1, len(letters) + 1):
        # itertools.permutations generates tuples of permutations
        for p in itertools.permutations(letters, i):
            # Join tuple into a string and add to the set of permutations
            permutations.add(''.join(p))
    return permutations

# Function to filter valid words from permutations based on the dictionary
def filter_valid_words(permutations, valid_words):
    # Return a sorted list of permutations that are in the valid_words set
    return sorted(word for word in permutations if word in valid_words)

# Function to download the word list from a given URL
def download_word_list(url, file_path):
    # Open the URL and read the response
    response = urllib.request.urlopen(url)
    data = response.read()
    # Write the data to a file
    with open(file_path, 'wb') as file:
        file.write(data)

# Main function to find valid Scrabble words from given letters
def scrabble_words(letters, dictionary_file):
    # Load the dictionary from the specified file
    valid_words = load_dictionary(dictionary_file)
    # Generate all permutations of the given letters
    permutations = generate_permutations(letters)
    # Filter permutations to find valid words
    return filter_valid_words(permutations, valid_words)

# URL of the word list to be downloaded
word_list_url = "https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt"
# Path to save the downloaded word list
word_list_file = "words.txt"

# Download the word list from the URL
download_word_list(word_list_url, word_list_file)

# Use the scrabble_words function to get valid words from "tabind"
words = scrabble_words("tabind", word_list_file)

# Print the list of valid words
print(words)
print(f"Number of valid words: {len(words)}")

```
Single-letter words in dictionary: {'p', 'q', 'r', 'g', 'y', 'd', 'o', 'z', 'k', 'l', 'v', 'n', 'a', 'f', 'w', 'e', 
'h', 't', 'c', 'i', 'j', 's', 'u', 'm', 'b', 'x'}
['a', 'ab', 'abd', 'abit', 'abn', 'abt', 'ad', 'adib', 'adin', 'adit', 'ai', 'aid', 'ain', 'aint', 'ait', 'an', 
'and', 'andi', 'ani', 'ant', 'anti', 'at', 'ati', 'ba', 'bad', 'bai', 'bain', 'bait', 'ban', 'band', 'bandi', 
'bandit', 'bani', 'bant', 'bat', 'bd', 'bi', 'bid', 'bin', 'bind', 'bint', 'bit', 'bn', 'bt', 'da', 'dab', 'dain', 
'daint', 'dan', 'dani', 'dat', 'db', 'di', 'dia', 'dian', 'dib', 'din', 'dint', 'dit', 'dita', 'dn', 'dt', 'i', 
'ia', 'ian', 'ib', 'iba', 'ibad', 'iban', 'id', 'ida', 'idant', 'in', 'inbd', 'ind', 'int', 'inta', 'it', 'ita', 
'itd', 'na', 'nab', 'nad', 'naib', 'naid', 'nat', 'nb', 'nd', 'ni', 'nib', 'nid', 'nit', 'nt', 'ta', 'tab', 'tabi', 
'tabid', 'tad', 'tai', 'tain', 'tan', 'tb', 'td', 'ti', 'tib', 'tid', 'tin', 'tina', 'tind', 'tn']
Number of valid words: 110
```
